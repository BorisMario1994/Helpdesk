import prisma from "../../PrismaConnection";
import { HelpdeskNote } from "../../../generated/prisma";
import { Prisma } from "@prisma/client";

// HelpdeskNoteModel class is used for encapsulating Helpdesk Note properties with all of its method for creating, updating or retrieving data from database. 
// It is created based on HelpdeskNote table structure in database and to align with the type created by Prisma ORM. 
class HelpdeskNoteModel {
  readonly linenum: number;
  readonly tanggal: Date;
  readonly username: string;
  comment: string;
  mentions: string[];

  // Constructor for HelpdeskNoteModel class
  constructor(linenum: number, tanggal: Date, username: string, comment: string, mentions: string[]) {
    this.linenum = linenum;
    this.tanggal = tanggal;
    this.username = username;
    this.comment = comment;
    this.mentions = mentions;
  };

  // Secondary constructor of HelpdeskNoteModel class that requires a HelpdeskNote typed object as its only parameter.
  static createFromType(note: HelpdeskNote) {
    const helpdeskNote = new HelpdeskNoteModel(note.LineNum, note.Tanggal, note.Username, note.Comment, note.Mentions.split(","));
    return helpdeskNote;
  };
  
  // Method for converting current HelpdeskNoteModel instance to HelpdeskNote type generated by Prisma ORM.
  createAsType = (nomor: string) => {
    const data: HelpdeskNote = {
      Nomor: nomor,
      LineNum: this.linenum,
      Tanggal: this.tanggal,
      Username: this.username,
      Comment: this.comment,
      Mentions: this.mentions.join(",")
    };
    return data;
  };

  // Method for generating new linenum for new HelpdeskNote data to be inserted in database by taking the latest linenum increased by one from
  // the same Helpdesk number.
  static async generateLatestNumber(nomor: string) {
    const latestNumber = await prisma.helpdeskNote.aggregate({
      _max: { LineNum: true },
      where: { Nomor: nomor }
    });
    return latestNumber._max.LineNum !== null ? latestNumber._max.LineNum + 1 : 0;
  };

  // Method for inserting single Helpdesk CC data to database table.
  insertNote = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskNote.create({
      data: this.createAsType(nomor)
    });
  };

  updateNote = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskNote.update({
      where: { Nomor_LineNum: { Nomor: nomor, LineNum: this.linenum } },
      data: this.createAsType(nomor)
    });
  }
};

export default HelpdeskNoteModel;
