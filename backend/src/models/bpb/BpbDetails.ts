import prisma from "../../PrismaConnection";
import { BpbDetails, HelpdeskDetails } from "../../../generated/prisma";
import { Prisma } from "@prisma/client";

// HelpdeskDetailsModel class is used for encapsulating Helpdesk Details properties with all of its method for creating, updating or retrieving data from database. 
// It is created based on HelpdeskDetails table structure in database and to align with the type created by Prisma ORM.  
class BpbDetailsModel {
  readonly linenum: number;
  readonly qty: number;
  readonly satuan: string;
  readonly nama: string;
  readonly wajibKembali: string;
  readonly tsKembali: Date = new Date("1900-01-01");

  // Constructor for HelpdeskDetailsModel class
  constructor(linenum: number, qty: number, satuan: string, nama: string, wajibKembali: string = "", tsKembali: Date = new Date("1900-01-01")) {
    this.linenum = linenum;
    this.qty = qty;
    this.satuan = satuan;
    this.nama = nama;
    this.wajibKembali = wajibKembali;
    this.tsKembali = tsKembali;
  };

  // Secondary constructor of HelpdeskDetailsModel class that requires a HelpdeskDetails typed object as its only parameter.
  static createFromType(details: BpbDetails) {
    return new BpbDetailsModel(details.LineNum, details.Qty, details.Satuan, details.Nama, details.WajibKembali, details.TS_Kembali);
  };

  // Method for converting current HelpdeskDetailsModel instance to HelpdeskDetails type generated by Prisma ORM.
  createAsType = (nomor: string) => {
    const data: BpbDetails = {
      Nomor: nomor,
      LineNum: this.linenum,
      Qty: this.qty,
      Satuan: this.satuan,
      Nama: this.nama,
      WajibKembali: this.wajibKembali,
      TS_Kembali: this.tsKembali
    };
    return data;
  };

  // Method for inserting single Helpdesk Detail data to database table.
  insertDetails = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.bpbDetails.create({
      data: this.createAsType(nomor)
    });
  };

  // Method for updating single Helpdesk Detail data to database table.
  updateDetails = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.bpbDetails.update({
      where: { Nomor_LineNum: { Nomor: nomor, LineNum: this.linenum } },
      data: this.createAsType(nomor)
    });
  };

  // Method for inserting a list of Helpdesk Detail data with the Helpdesk number passed as parameter. This method also accept
  // an optional parameter with type of database transaction from Prisma. It will use the transaction instance
  // to execute the operation if the parameter is provided or plain prisma instance with no transaction if isn't.
  static bulkInsertDetails = async (nomor: string, detailsList: BpbDetailsModel[], tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.bpbDetails.createMany({
      data: detailsList.map(details => details.createAsType(nomor))
    });
  };

  // Method for delete existing list of Helpdesk Detail data based on Helpdesk number passed as parameter. This method also accept
  // an optional parameter with type of database transaction from Prisma. It will use the transaction instance
  // to execute the operation if the parameter is provided or plain prisma instance with no transaction if isn't.
  static bulkDeleteDetails = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.bpbDetails.deleteMany({
      where: { Nomor: nomor }
    });
  };
};

export default BpbDetailsModel;
