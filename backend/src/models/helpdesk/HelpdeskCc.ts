import prisma from "../../PrismaConnection";
import { HelpdeskCc } from "../../../generated/prisma";
import { Prisma } from "@prisma/client";

// HelpdeskCcModel class is used for encapsulating Helpdesk CC properties with all of its method for creating, updating or retrieving data from database. 
// It is created based on HelpdeskCc table structure in database and to align with the type created by Prisma ORM. 
class HelpdeskCcModel {
  linenum: number;
  readonly cc: string;
  ac: string;
  readonly tanggalAc: Date;
  readonly pic: string;
  readonly namaFile: string;
  hashedFile: string = "";

  // Constructor for HelpdeskCcModel class
  constructor(linenum: number, cc: string, ac: string, tanggalAc: Date = new Date("1900-01-01"), pic: string = "", namaFile: string = "") {
    this.linenum = linenum;
    this.cc = cc;
    this.ac = ac;
    this.tanggalAc = tanggalAc;
    this.pic = pic;
    this.namaFile = namaFile;
  };

  // Secondary constructor of HelpdeskCcModel class that requires a HelpdeskCc typed object as its only parameter.
  static createFromType(cc: HelpdeskCc) {
    return new HelpdeskCcModel(cc.LineNum, cc.CC, cc.AC, cc.TanggalAc, cc.PIC, cc.NamaFile);
  };

  // Method for converting current HelpdeskCcModel instance to HelpdeskCc type generated by Prisma ORM.
  createAsType = (nomor: string) => {
    const data: HelpdeskCc = {
      Nomor: nomor,
      LineNum: this.linenum,
      CC: this.cc,
      AC: this.ac,
      TanggalAc: this.tanggalAc,
      PIC: this.pic,
      NamaFile: this.namaFile
    };
    return data;
  };

  // Method for inserting single Helpdesk CC data to database table.
  insertCc = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskCc.create({
      data: this.createAsType(nomor)
    });
  };

  // Method for updating single Helpdesk CC data to database table.
  updateCc = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskCc.update({
      where: { Nomor_LineNum: { Nomor: nomor, LineNum: this.linenum } } ,
      data: this.createAsType(nomor)
    });
  };

  // Method for inserting a list of Helpdesk CC data with the Helpdesk number passed as parameter. This method also accept
  // an optional parameter with type of database transaction from Prisma. It will use the transaction instance
  // to execute the operation if the parameter is provided or plain prisma instance with no transaction if isn't.
  static bulkInsertCc = async (nomor: string, ccList: HelpdeskCcModel[], tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskCc.createMany({
      data: ccList.map(cc => cc.createAsType(nomor))
    });
  };

  // Method for delete existing list of Helpdesk CC data based on Helpdesk number passed as parameter. This method also accept
  // an optional parameter with type of database transaction from Prisma. It will use the transaction instance
  // to execute the operation if the parameter is provided or plain prisma instance with no transaction if isn't.
  static bulkDeleteCc = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskCc.deleteMany({
      where: { Nomor: nomor }
    });
  };
};

export default HelpdeskCcModel;
