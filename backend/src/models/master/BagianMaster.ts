import prisma from "../../PrismaConnection";
import { HelpdeskBagian } from "../../../generated/prisma";

// BagianMaster class is used for encapsulating Bagian Master properties with all of its method for creating, updating or retrieving data from database. 
// It is created based on HelpdeskBagian table structure in database and to align with the type created by Prisma ORM.  
class BagianMaster {
  readonly code: string;
  readonly descrption: string;
  readonly isActive: boolean;
  readonly upperBagianCode: string;
  readonly treeLevel: number;

  // Constructor for initializing BagianMaster class.
  constructor(code: string = "", descrption: string = "", isActive: boolean = false, upperBagianCode: string = "", treeLevel: number = 0) {
    this.code = code;
    this.descrption = descrption;
    this.isActive = isActive;
    this.upperBagianCode = upperBagianCode;
    this.treeLevel = treeLevel;
  };

  // Second constructor of BagianMaster class which uses HelpdeskBagian type (generated from Prisma ORM based on the corresponding table structure) as parameter. 
  static createFromType = (data: HelpdeskBagian) => {
    return new BagianMaster(data.Code, data.Descrption, data.IsActive === "Y", (data.UpperBagianCode || ""));
  };

  // Converting BagianMaster class back to HelpdeskBagian type for database operations purpose to utilizing built-in database operation for each type as Prisma ORM has 
  // provided all database operations for each of its created type. 
  createAsType = () => {
    const data: HelpdeskBagian = {
      Code: this.code,
      Descrption: this.descrption,
      IsActive: this.isActive ? "Y" : "N",
      UpperBagianCode: this.upperBagianCode
    };
    return data;
  };

  // Check on database for the table on whether the "code" value provided by user is already exists in database. Code is the primary key 
  // of HelpdeskBagian table, thus the value couldn't be redundant.
  static checkBagianCodeAvailability = async (code: string) => {
    return !(await prisma.helpdeskBagian.findFirst({
      where: { Code: code }
    }));
  };

  // Method acts as interface to retrieve all Bagian Master data from database table using method generated by Prisma ORM.
  static getBagianMasterList = async () => {
    const getBagianMasterListQuery: HelpdeskBagian[] = await prisma.helpdeskBagian.findMany();
    return getBagianMasterListQuery.map((bagian) => BagianMaster.createFromType(bagian));
  };

  // Method to get company structure from database by execute a predefined store procedure.
  static getCompanyStructure = async () => {
    const getCompanyStructureQuery: any[] = await prisma.$queryRaw`EXEC [dbo].[EF_GET_COMPANY_STRUCTURE]`;
    const bagianList: BagianMaster[] = [];
    getCompanyStructureQuery.forEach(data => {
      const newData = new BagianMaster(data.Code, data.Descrption, true, data.UpperBagianCode, data.TreeLevel);
      bagianList.push(newData);
    })
    return bagianList;
  };

  // Method acts as interface to insert Bagian Master data into table using method generated by Prisma ORM.
  createBagianMaster = async () => {
    return prisma.helpdeskBagian.create({
      data: this.createAsType()
    });
  };

  // Method acts as interface to update Bagian Master data into table using method generated by Prisma ORM.
  updateBagianMaster = async () => {
    return prisma.helpdeskBagian.update({
      where: { Code: this.code },
      data: this.createAsType()
    });
  };
};

export default BagianMaster;
