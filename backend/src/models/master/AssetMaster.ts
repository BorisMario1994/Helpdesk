import prisma from "../../PrismaConnection";
// import { HelpdeskAktiva } from "../../../generated/prisma";

// AktivaMaster class is used for encapsulating Aktiva Master properties with all of its method for creating, updating or retrieving data from database. 
// It is created based on HelpdeskAktivaMaster table structure in database and to align with the type created by Prisma ORM. 
class AssetMaster {
  readonly kodeAktiva: string;
  readonly descrption: string;

  // Constructor for initializing AktivaMaster class.
  constructor(kodeAktiva: string, descrption: string) {
    this.kodeAktiva = kodeAktiva;
    this.descrption = descrption;
  };  

  static getAssetMasterList = async () => {
    const obj: { ItemCode: string, ItemName: string }[] = await prisma.$queryRaw`SELECT A.ItemCode, A.ItemName FROM SAPHCL.HOCK.DBO.OITM A INNER JOIN SAPHCL.HOCK.DBO.[@HCL_LOKFA] B ON A.ItemCode = B.U_KODE_ITEM WHERE B.U_ACTIVE = 'Y' ORDER BY A.ITEMCODE`;
    return obj.map(item => new AssetMaster(item.ItemCode, item.ItemName));
  };
  /*
  readonly kodeAktiva: string;
  readonly hardwareCode: string;
  readonly descrption: string;
  readonly merk: string;
  readonly remarks: string;
  readonly tanggalPembelian: Date;
  readonly batasGaransi: Date;
  readonly tanggalAfkir: Date;

  // Constructor for initializing AktivaMaster class.
  constructor(kodeAktiva: string, hardwareCode: string, descrption: string, merk: string, remarks: string, tanggalPembelian: Date, batasGaransi: Date, tanggalAfkir: Date) {
    this.kodeAktiva = kodeAktiva;
    this.hardwareCode = hardwareCode;
    this.descrption = descrption;
    this.merk = merk;
    this.remarks = remarks;
    this.tanggalPembelian = tanggalPembelian;
    this.batasGaransi = batasGaransi;
    this.tanggalAfkir = tanggalAfkir;
  };  

  // Second constructor of AktivaMaster class which uses HelpdeskAktivaMaster type (generated from Prisma ORM based on the corresponding table structure) as parameter. 
  static createFromType = (data: HelpdeskAktiva) => {
    return new AktivaMaster(data.KodeAktiva, data.HardwareCode, data.Descrption, data.Merk, data.Remarks, data.TanggalPembelian, data.BatasGaransi, data.TanggalAfkir);
  };

  // Converting AktivaMaster class back to HelpdeskAktivaMaster type for database operations purpose to utilizing built-in database operation for each type 
  // as Prisma ORM has provided all database operations for each of its created type. 
  createAsType = () => {
    const data: HelpdeskAktiva = {
      KodeAktiva: this.kodeAktiva,
      HardwareCode: this.hardwareCode,
      Descrption: this.descrption,
      Merk: this.merk,
      Remarks: this.remarks,
      TanggalPembelian: this.tanggalPembelian,
      BatasGaransi: this.batasGaransi,
      TanggalAfkir: this.tanggalAfkir
    };
    return data;
  };

  static getAssetMasterList = async () => {
    
  }

  // Check on database for the table on whether the "code" value provided by user is already exists in database. Code is the primary key 
  // of HelpdeskAktivaMaster table, thus the value couldn't be redundant.
  static checkKodeAktivaAvailability = async (code: string) => {
    return !(await prisma.helpdeskAktiva.findFirst({
      where: { KodeAktiva: code }
    }));
  };

  // Method acts as interface to retrieve all Aktiva Master data from database table using method generated by Prisma ORM.
  static getAktivaMasterList = async () => {
    const getAktivaMasterListQuery: HelpdeskAktiva[] = await prisma.helpdeskAktiva.findMany();
    return getAktivaMasterListQuery.map(hardware => AktivaMaster.createFromType(hardware));
  };

  // Method acts as interface to insert Aktiva Master data into table using method generated by Prisma ORM.
  createAktivaMaster = async () => {
    return prisma.helpdeskAktiva.create({
      data: this.createAsType()
    });
  };

  // Method acts as interface to update Aktiva Master data into table using method generated by Prisma ORM.
  updateAktivaMaster = async () => {
    return prisma.helpdeskAktiva.update({
      where: { KodeAktiva: this.kodeAktiva },
      data: this.createAsType()
    });
  };
  */
};

export default AssetMaster;
