import { SkmHeader } from "../../../generated/prisma";
import prisma from "../../PrismaConnection";
import crypto from "crypto";
import path from "path";
import fs from "fs";
import SkmDetailsModel from "./SkmDetails";
import SkmCcModel from "./SkmCc";
import SkmPenangananModel from "./SkmPenanganan";


class SkmHeaderModel {
  nomor: string;
  readonly noReferensi: string;
  readonly jenis: string;
  readonly lingkup: string;
  readonly kategori: string;
  readonly dari: string;
  cardCode: string = "";
  cardName: string = "";
  status: string = "";
  hashedFile: string = "";
  namaFile: string = "";
  readonly tanggalBuka: Date;
  tanggalTerbit: Date = new Date("1900-01-01");
  tanggalTerima: Date = new Date("1900-01-01");
  tanggalExpired: Date = new Date("1900-01-01");
  tanggalSelesai: Date = new Date("1900-01-01");
  itemCodeList: string = "";
  itemNameList: string = "";
  keluhanList: string = "";
  bagianTertujuList: string = "";
  progress: string = "";
  notified: boolean = false;
  detailsList: SkmDetailsModel[] = [];
  ccList: SkmCcModel[] = [];
  penangananList: SkmPenangananModel[] = [];

  constructor(nomor: string, noReferensi: string, jenis: string, lingkup: string, kategori: string, dari: string, status: string, tanggalBuka: Date) {
    this.nomor = nomor;
    this.noReferensi = noReferensi;
    this.jenis = jenis;
    this.lingkup = lingkup;
    this.kategori = kategori;
    this.dari = dari;
    this.status = status;
    this.tanggalBuka = tanggalBuka;
  }

  // Secondary constructor of Helpdesk Header class by providing HelpdeskHeader type value for its parameter
  static createFromType(skm: SkmHeader) {
    const skmHeader = new SkmHeaderModel(skm.Nomor, skm.NoReferensi, skm.Jenis, skm.Lingkup, skm.Kategori, skm.Dari, skm.Status, skm.TanggalBuka);
    skmHeader.cardCode = skm.CardCode;
    skmHeader.cardName = skm.CardName;
    skmHeader.namaFile = skm.NamaFile;
    skmHeader.tanggalTerbit = skm.TanggalTerbit;
    skmHeader.tanggalTerima = skm.TanggalTerima;
    skmHeader.tanggalExpired = skm.TanggalExpired;
    skmHeader.tanggalSelesai = skm.TanggalSelesai;
    return skmHeader;
  };

  // Method for converting current HelpdeskHeader instance to HelpdeskHeader type generated by Prisma ORM
  createAsType = () => {
    const data: SkmHeader = {
      Nomor: this.nomor,
      NoReferensi: this.noReferensi,
      Jenis: this.jenis,
      Lingkup: this.lingkup,
      Kategori: this.kategori,
      Dari: this.dari,
      CardCode: this.cardCode,
      CardName: this.cardName,
      Status: this.status,
      NamaFile: this.namaFile,
      TanggalBuka: this.tanggalBuka,
      TanggalTerbit: this.tanggalTerbit,
      TanggalTerima: this.tanggalTerima,
      TanggalExpired: this.tanggalExpired,
      TanggalSelesai: this.tanggalSelesai
    }
    return data;
  };

  static async generateLatestNumber(cabang: string) {
    let prefixNumber = `${cabang}${new Date().getFullYear()}`;
    const latestNumber = await prisma.skmHeader.aggregate({
      _max: { Nomor: true },
      where: { Nomor: { startsWith: prefixNumber } }
    });
    prefixNumber = prefixNumber.concat((latestNumber._max.Nomor !== null ? Number(latestNumber._max.Nomor[-4]) + 1 : 1).toString().padStart(4, '0'));
    return prefixNumber;
  };

  static async getSkmListBySelection(user: string, type: string) {
    let whereClause = "";
    switch (type) {
			case "all":
				whereClause = `SUBSTRING(T0.Dari, 1, 4) = SUBSTRING('${user}', 1, 4) AND (T0.Dari = '${user}' OR SUBSTRING('${user}', 5, 3) = '-01')`;
				break;
      case "published-open":
        whereClause = `T0.Dari = @USER AND T0.[Status] NOT IN ('DONE','REJECTED')`;
        break;
      case "received-open":
        whereClause = `CONCAT(T1.Bagian, '-01') = @USER AND (SELECT COUNT(X.CC) FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 0 AND X.AC <> 'APPROVE') <= 0`;
        break;
      case "published-closed":
        whereClause = `T0.Dari = @USER AND T0.[Status] IN ('DONE', 'REJECTED')`;
        break;
      case "received-closed":
        whereClause = `CONCAT(T1.Bagian, '-01') = @USER AND T0.[Status] = 'DONE'`;
        break;
      case "approved":
				whereClause = `((CONCAT(T2.CC, '-01') = '${user}' OR (T2.CC = '${user}' AND (SUBSTRING('${user}', 1, 4) IN ('JPJL','MSSA','MWGM') OR '${user}' LIKE '%PBL%'))) AND T2.AC IN ('APPROVE','REVISION')) OR (CONCAT(T0.Kepada, '-01') = '${user}' AND (SELECT COUNT(A.LineNum) FROM HelpdeskDetails A WHERE A.Nomor = T0.Nomor AND ISNULL(A.PIC, '') <> '') > 0)`;
				break;
			case "waiting-for-approval":
				whereClause = `(CONCAT(T2.CC, '-01') = '${user}' OR (T2.CC = '${user}' AND (SUBSTRING('${user}', 1, 4) IN ('JPJL','MSSA','MWGM') OR '${user}' LIKE '%PBL%'))) AND T2.AC <> 'APPROVE' AND (SELECT COUNT(X.CC) FROM HelpdeskCc X WHERE X.Nomor = T0.Nomor AND X.LineNum < T2.LineNum AND X.AC <> 'APPROVE') <= 0 AND T0.[Status] NOT IN ('DONE','REJECTED','REVISION')`;

        `"T0.[Status] = 'UNPUBLISHED' AND CONCAT(T3.CC, '-01' = '${user}' OR (T3.CC = '${user}' AND (SUBSTRING('${user}', 1, 4) IN ('JPJL','MSSA','MWGM') OR '${user}' LIKE '%PBL%'))`

        "(T0.[STATUS] = 'PUBLISHED' AND T2.STATUS_VERIFIED <> T2.STATUS_APPLIED AND T2.STATUS_APPLIED <> 'ASK VERIFICATION' AND (SELECT CONCAT(X.BAGIAN, '-01') FROM SKM_VERIFICATION X WHERE X.NOMOR = T0.NOMOR AND X.LINENUM_PENANGANAN = T2.LINENUM AND X.VERIFIED = 'N' AND X.LINENUM = (SELECT MIN(Y.LINENUM) FROM SKM_VERIFICATION Y WHERE Y.NOMOR = T0.NOMOR AND Y.LINENUM_PENANGANAN = T2.LINENUM AND Y.VERIFIED = 'N' AND Y.VERIFICATOR NOT IN ('PUBLISHER', 'SQCT')) AND (SELECT COUNT(Y.VERIFICATOR) FROM SKM_VERIFICATION Y WHERE Y.NOMOR = T0.NOMOR AND Y.LINENUM_PENANGANAN = T2.LINENUM AND Y.VERIFIED = 'R') <= 0) = '${user}') OR (T0.[STATUS] NOT IN ('DONE','REJECTED','REVISION') AND (SELECT CONCAT(CC, '-01') FROM SKM_CC X WHERE X.NOMOR = T0.NOMOR AND X.PHASE = (CASE WHEN T0.[STATUS] = 'PUBLISHED' THEN 1 ELSE 0 END) AND X.LINENUM = (SELECT MIN(LINENUM) FROM SKM_CC Y WHERE Y.NOMOR = T0.NOMOR AND Y.PHASE = (CASE WHEN T0.[STATUS] = 'PUBLISHED' THEN 1 ELSE 0 END) AND Y.AC = 'N') AND X.LINENUM <> (SELECT MAX(LINENUM) FROM SKM_CC Y WHERE Y.NOMOR = T0.NOMOR AND Y.CC = 'MQAM')) = '${user}')"
				break;
      case "waiting-for-review":
        whereClause = `T2.AC = 'REQUESTING REVIEW' AND '${user}' IN (SELECT CASE WHEN LEN(item) = 4 THEN CONCAT(item, '-01') ELSE item END item FROM [dbo].[ufnSplt](T4.Mentions, ','))`;
        break;
      case "requested":
        whereClause = `'${user}' = 'MQAM-01' AND T0.[Status] = 'UNPUBLISHED' AND (SELECT X.AC FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 0 AND X.CC = 'MQAM' AND X.LineNum = (SELECT MAX(A.LineNum) FROM SkmCc A WHERE A.Nomor = X.Nomor AND A.Phase = 0)) = 'NO ACTION' AND (SELECT COUNT(X.CC) FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 0 AND X.AC <> 'APPROVE' AND X.LineNum < (SELECT MAX(A.LineNum) FROM SkmCc A WHERE A.Nomor = X.Nomor AND A.Phase = X.Phase)) <= 0`
        break;
      case "published":
				whereClause = `SUBSTRING('${user}', 1, 4) = 'MQAM' AND T0.[Status] = 'PUBLISHED' AND T1.StatusVerified NOT IN ('NEXT ORDER', 'MEMINTA SAMPLE')`;
				break;
      case "published-next-order":
				whereClause = `SUBSTRING('${user}', 1, 4) = 'MQAM' AND T0.[Status] = 'PUBLISHED' AND T1.StatusVerified = 'NEXT ORDER'`;
				break;
			case "published-research":
				whereClause = `(SUBSTRING('${user}', 1, 4) = 'MQAM' OR ('${user}' = 'MRND-01' AND T0.Kategori = 'Ketidaksesuaian Sample')) AND T0.[Status] = 'PUBLISHED' AND T1.StatusVerified = 'MEMINTA SAMPLE'`;
				break;
			case "job-registration":
				whereClause = `(T0.Dari = '${user}' AND T0.[Status] = 'REVISION') OR T3.AC = '${user}' OR ((CONCAT(T1.Bagian, '-01') = '${user}' OR ISNULL(T1.PIC, '') = '${user}') AND T0.[Status] IN ('PUBLISHED', 'DONE') AND T1.StatusVerified NOT IN ('NEXT ORDER', 'MEMINTA SAMPLE'))`;
				break;
      case "job-registration-next-order":
        whereClause = `(CONCAT(T1.Bagian, '-01') = '${user}' OR ISNULL(T1.PIC, '') = '${user}') AND T0.[Status] IN ('PUBLISHED', 'DONE') AND T2.StatusVerified = 'NEXT ORDER'`;
        break;
      case "job-registration-research":
        whereClause = `(CONCAT(T1.Bagian, '-01') = '${user}' OR ISNULL(T1.PIC, '') = '${user}') AND T0.[Status] IN ('PUBLISHED', 'DONE') AND T1.StatusVerified = 'MEMINTA SAMPLE'`;
        break;
      case "ask-verification":
        whereClause = `T0.[Status] = 'PUBLISHED' AND T1.StatusApplied = 'ASK VERIFICATION' AND T2.Phase = 1 AND T2.Verified = "NO ACTION" AND (SELECT COUNT(X.Verificator) FROM SkmVerification X WHERE X.Nomor = T2.Nomor AND X.LineNumPenanganan = T2.LineNumPenanganan AND X.Phase = T2.Phase AND X.Verified <> "APPROVE" AND X.LineNum < T2.LineNum) <= 0 AND (CONCAT(T2.Bagian, '-01') = '${user}' OR T2.Bagian = '${user}')`
        break;
			default:
				whereClause = `SUBSTRING(T0.Nomor, 1, 4) = SUBSTRING('${user}', 1, 4) AND (T0.Dari = '${user}' OR SUBSTRING('${user}', 5, 3) = '-01')`;
				break;
		}

    const skmList: SkmHeader[] = await prisma.$queryRawUnsafe(`SELECT DISTINCT T0.Nomor, (SELECT STUFF((SELECT '|' + X.ItemCode FROM SkmDetails X WHERE X.Nomor = T0.Nomor ORDER BY X.LineNum, X.ItemCode FOR XML PATH('')), 1, 1, '')) Jenis, (SELECT STUFF((SELECT '|' + X.ItemName FROM SkmDetails X WHERE X.Nomor = T0.Nomor ORDER BY X.LineNum, X.ItemCode FOR XML PATH('')), 1, 1, '')) Lingkup, (SELECT STUFF((SELECT '|' + CAST(X.Keluhan AS VARCHAR(MAX)) FROM SkmDetails X WHERE X.Nomor = T0.Nomor ORDER BY X.LineNum, X.ItemCode FOR XML PATH('')), 1, 1, '')) Kategori, [Status], CASE WHEN [Status] = 'DONE' THEN 'Finished (Done)' WHEN [Status] = 'REJECTED' THEN 'Rejected' WHEN [Status] = 'REVISION' THEN CASE WHEN ISNULL((SELECT X.CC FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 0 AND X.AC = 'REVISION'), '') = '' THEN 'Revision was asked by Recipient' ELSE (SELECT CONCAT('Revision was asked by Publishing Approver ', X.LineNum + 1, ' (', X.CC, ')') FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 0 AND X.AC = 'REVISION') END WHEN [Status] = 'UNPUBLISHED' THEN (SELECT CONCAT('Waiting for Approval from Publishing Approver ', CASE X.LineNum WHEN (SELECT MAX(A.LineNum) FROM SkmCc A WHERE A.Nomor = X.Nomor AND A.Phase = 0) THEN 'MQAM' WHEN (SELECT MAX(A.LineNum) - 1 FROM SkmCc A WHERE A.Nomor = X.Nomor AND SUBSTRING(A.Nomor, 1, 1) = 'S' AND A.Phase = 0) THEN 'SQCT' ELSE X.LineNum + 1 END, ' (', X.CC, ')') FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 0 AND X.AC = 'NO ACTION' AND (SELECT COUNT(A.CC) FROM SkmCc A WHERE A.Nomor = X.Nomor AND A.Phase = X.Phase AND A.LineNum < X.LineNum AND A.AC <> 'APPROVE') <= 0) ELSE STUFF(CONCAT((SELECT CONCAT('|Recipient ', X.LineNum, ' (', X.Bagian, '): ', CASE WHEN X.StatusApplied = 'WAITING' THEN CONCAT('Waiting, SKM has not been filled (', CASE WHEN LEN(X.PIC) <= 0 THEN X.Bagian ELSE X.PIC END, ')') WHEN X.StatusVerified = 'DONE' THEN 'Done' WHEN X.StatusApplied = X.StatusVerified THEN CONCAT(X.StatusVerified, ' (', CASE WHEN LEN(X.PIC) <= 0 THEN X.Bagian ELSE X.PIC END, ')') WHEN ISNULL((SELECT A.Verificator FROM SkmVerification A WHERE A.Nomor = X.Nomor AND A.LineNumPenanganan = X.LineNum AND A.Verified = 'REVISION'), '') <> '' THEN (SELECT CONCAT('Revision was asked by ', A.Verificator, ' (', A.Bagian, ') for ', X.StatusApplied, ' status request') FROM SkmVerification A WHERE A.Nomor = X.Nomor AND A.LineNumPenanganan = X.LineNum) ELSE (SELECT CONCAT('Requesting ', X.StatusApplied, ' status, waiting for approval from ', A.Verificator, ' (', A.Bagian, ')') FROM SkmVerification A WHERE A.Nomor = X.Nomor AND A.LinenumPenanganan = X.LineNum AND A.Phase = (CASE X.StatusApplied WHEN 'ASK VERIFICATION' THEN 1 ELSE 0 END) AND (SELECT COUNT(T.Verificator) FROM SkmVerification T WHERE T.Nomor = A.Nomor AND T.LineNumPenanganan = A.LineNumPenanganan AND T.LineNum < A.LineNum AND T.Verified = 'NO ACTION') <= 0) END) FROM SkmPenanganan X WHERE X.Nomor = T0.Nomor ORDER BY X.LineNum), CASE WHEN (SELECT COUNT(X.CC) FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 1 AND X.AC <> 'APPROVED') > 0 THEN CASE WHEN (SELECT X.CC FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 1 AND X.AC = 'REVISION') <> '' THEN (SELECT CONCAT('Revision was asked by Recipient Approver ', X.LineNum + 1, ' (', X.CC, ')') FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 1 AND X.AC = 'REVISION') ELSE (SELECT CONCAT('Waiting for Approval from Recipient Approver ', X.LineNum + 1, ' (', X.CC, ')') FROM SkmCc X WHERE X.Nomor = T0.Nomor AND X.Phase = 1 AND X.AC = 'NO ACTION' AND (SELECT COUNT(A.CC) FROM SkmCc A WHERE A.Nomor = X.Nomor AND A.Phase = X.Phase AND A.LineNum < X.LineNum AND A.AC <> 'APPROVE') <= 0) END ELSE '' END), 1, 1, '') END NoReferensi, SUBSTRING(T0.Dari, 1, 7) Dari, (SELECT STUFF((SELECT '|' + X.Bagian FROM SkmPenanganan X WHERE X.Nomor = T0.Nomor FOR XML PATH('')), 1, 1, '')) CardCode, T0.TanggalBuka FROM SkmHeader T0 LEFT JOIN SkmPenanganan T1 ON T0.Nomor = T1.Nomor LEFT JOIN SkmVerification T2 ON T1.Nomor = T2.Nomor AND T1.LineNum = T2.LineNumPenanganan LEFT JOIN SkmCc T3 ON T0.Nomor = T3.Nomor WHERE ${whereClause} ORDER BY T0.TanggalBuka DESC, T0.NOMOR DESC`);
    return skmList.map(helpdesk => {
      const newSkm = SkmHeaderModel.createFromType(helpdesk);
      newSkm.itemCodeList = newSkm.jenis;
      newSkm.itemNameList = newSkm.lingkup;
      newSkm.keluhanList = newSkm.kategori;
      newSkm.progress = newSkm.noReferensi;
      newSkm.bagianTertujuList = newSkm.cardCode;
      newSkm.notified = newSkm.namaFile === "Y";
      return newSkm;
    });
  };

  // Method to retrive a single Helpdesk Header data together with its related value from dependent table (Helpdesk Details, CC, and Note)
  // using the "nomor" value as parameter.
  static async getSkmByNumber(nomor: string) {
    const data = await prisma.skmHeader.findFirstOrThrow({
      where: { Nomor: nomor },
      include: { SkmDetails: true, SkmCc: true, SkmPenanganan: { include: { SkmVerification: true } } }
    })
    const skmHeader = SkmHeaderModel.createFromType(data);
    if (skmHeader.namaFile.length > 0) {
      const filePath = path.join(__dirname, "../uploads/skm/", skmHeader.nomor, skmHeader.namaFile);
      if (fs.existsSync(filePath)) {
        const fileBuffer = fs.readFileSync(filePath);
        skmHeader.hashedFile = crypto.createHash("sha256").update(fileBuffer).digest("hex");
      }
    }

    skmHeader.detailsList.push(...data.SkmDetails.map(details => SkmDetailsModel.createFromType(details)));
    skmHeader.ccList.push(...data.SkmCc.map(ccData => {
      let hashedFile = "";
      if (ccData.NamaFile.length > 0) {
        const filePath = path.join(__dirname, "../uploads/skm/", skmHeader.nomor, ccData.NamaFile);
        if (fs.existsSync(filePath)) {
          const fileBuffer = fs.readFileSync(filePath);
          hashedFile = crypto.createHash("sha256").update(fileBuffer).digest("hex");
        }
      }
      const cc = SkmCcModel.createFromType(ccData);
      cc.hashedFile = hashedFile;
      return cc;
    }));
    skmHeader.penangananList = await SkmPenangananModel.getSkmPenangananList(nomor);
    return skmHeader;
    /*
    skmHeader.noteList.push(...data.HelpdeskNote.map(note => HelpdeskNoteModel.createFromType(note)));
    return skmHeader
    */
  };
};

export default SkmHeaderModel;
