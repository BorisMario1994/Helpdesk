import prisma from "../../PrismaConnection";
import { HelpdeskNotif } from "../../../generated/prisma";
import { Prisma } from "@prisma/client";

// HelpdeskNotifModel class is used for encapsulating Helpdesk Notif properties with all of its method for creating, updating or retrieving data from database. 
// It is created based on HelpdeskNotif table structure in database and to align with the type created by Prisma ORM. 
class HelpdeskNotifModel {
  readonly username: string;
  readonly action: string;

  // Constructor for HelpdeskNotifModel class
  constructor(username: string, action: string) {
    this.username = username;
    this.action = action;
  };

  // Secondary constructor of HelpdeskNotifModel class that requires a HelpdeskNotif typed object as its only parameter.
  static createFromType(notif: HelpdeskNotif) {
    const helpdeskNotif = new HelpdeskNotifModel(notif.Username, notif.Action);
    return helpdeskNotif;
  };
  
  // Method for converting current HelpdeskNotifModel instance to HelpdeskNotif type generated by Prisma ORM.
  createAsType = (nomor: string) => {
    const data: HelpdeskNotif = {
      Nomor: nomor,
      Username: this.username,
      Action: this.action
    };
    return data;
  };

  // Method for inserting many Helpdesk Notif data at once to database table.
/*   static bulkInsertNotif = async (nomor: string, notifList: HelpdeskNotifModel[], tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskNotif.createMany({
      data: notifList.map(notif => notif.createAsType(nomor))
    });
  };
 */

  static bulkInsertNotif = async (nomor: string, notifList: HelpdeskNotifModel[], tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
  
    // Remove duplicates based on Nomor + Username
    const uniqueMap = new Map<string, HelpdeskNotif>();
    notifList.forEach(notif => {
      const key = `${nomor}-${notif.username}`;
      if (!uniqueMap.has(key)) {
        uniqueMap.set(key, notif.createAsType(nomor));
      }
    });
  
    const uniqueData = Array.from(uniqueMap.values());
  
    return client.helpdeskNotif.createMany({
      data: uniqueData
    });
  };
  


  // Method for deleting many Helpdesk Notif data at once from database table.
  static bulkDeleteNotif = async (nomor: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskNotif.deleteMany({
      where: { Nomor: nomor }
    });
  };

  // Method for deleting single Helpdesk Notif data from database table.
  static deleteNotif = async (nomor: string, username: string, tx?: Prisma.TransactionClient) => {
    const client = tx ?? prisma;
    return client.helpdeskNotif.delete({
      where: { Nomor_Username: { Nomor: nomor, Username: username }}
    });
  }
};

export default HelpdeskNotifModel;
