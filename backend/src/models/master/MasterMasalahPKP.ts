import prisma from "../../PrismaConnection";
import { PkpMasterMasalah } from "../../../generated/prisma";

// MasterMasalahPkp class is used for encapsulating Master Masalah PKP properties with all of its method for creating, updating or retrieving data from database. 
// It is created based on PkpMasterMasalah table structure in database and to align with the type created by Prisma ORM. 
class MasterMasalahPkp {
  readonly code: number;
  readonly masalah: string;
  readonly isActive: boolean;

  // Constructor for initializing MasterMasalahPkp class.
  constructor(code: number = -1, masalah: string = "", isActive: boolean = false) {
    this.code = code;
    this.masalah = masalah;
    this.isActive = isActive;
  };

  // Second constructor of MasterMasalahPkp class which uses PkpMasterMasalah type (generated from Prisma ORM based on the corresponding table structure) as parameter. 
  static createFromType = (data: PkpMasterMasalah) => {
    return new MasterMasalahPkp(data.Code, data.Masalah, data.IsActive === "Y");
  };

  // Converting MasterMasalahPkp class back to PkpMasterMasalah type for database operations purpose to utilizing built-in database operation for each type 
  // as Prisma ORM has provided all database operations for each of its created type. 
  createAsType = () => {
    const data: PkpMasterMasalah = {
      Code: this.code,
      Masalah: this.masalah,
      IsActive: this.isActive ? "Y" : "N"
    };
    return data;
  };

  // Check on database for the table on whether the "masalah" value provided by user is already exists in database. Masalah is not the primary key 
  // of PkpMasterMasalah table, but it acts like one because of the distinct property it should be, thus the value couldn't be redundant.
  static getMasterMasalahPKPByName = async (masalah: string) => {
    return prisma.pkpMasterMasalah.findFirst({
      where: { Masalah: masalah }
    });
  };

  // Method for generating new linenum for new MasterMasalahPkp data to be inserted in database by taking the latest linenum increased by one.
  static async generateLatestNumber() {
    const latestNumber = await prisma.pkpMasterMasalah.aggregate({
      _max: { Code: true }
    });
    return latestNumber._max.Code !== null ? latestNumber._max.Code + 1 : 1;
  };

  // Method acts as interface to retrieve all Master Masalah PKP data from database table using method generated by Prisma ORM.
  static getMasterMasalahPkpList = async () => {
    const getMasterMasalahPkpListQuery: PkpMasterMasalah[] = await prisma.pkpMasterMasalah.findMany();
    return getMasterMasalahPkpListQuery.map(masalah => MasterMasalahPkp.createFromType(masalah));
  };

  // Method acts as interface to insert Master Masalah PKP data into table using method generated by Prisma ORM.
  createMasterMasalahPKP = async () => {
    return prisma.pkpMasterMasalah.create({
      data: this.createAsType()
    });
  };

  // Method acts as interface to update Master Masalah PKP data into table using method generated by Prisma ORM.
  updateMasterMasalahPKP = async () => {
    return prisma.pkpMasterMasalah.update({
      where: { Code: this.code },
      data: this.createAsType()
    });
  };
};

export default MasterMasalahPkp;
